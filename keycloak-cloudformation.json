{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "keycloak",
    "Parameters": {
        "ApplicationName": {
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9-]*",
            "ConstraintDescription": "Must be alphanumeric string",
            "Description": "Application name eg <projectx>",
            "MinLength": "1",
            "Type": "String",
            "Default": "keycloak"
        },
        "ExternalDnsSuffix": {
            "Default": "myDomain.com.",
            "MinLength": "1",
            "Description": "External dns suffix to add for route53 records",
            "Type": "String"
        },
        "InstanceCount": {
            "Type": "Number",
            "Description": "How many ec2 instances to launch",
            "Default": "2"
        },
        "MaxInstanceCount": {
            "Type": "Number",
            "Description": "Maximum ec2 instances to launch",
            "Default": "3"
        },
        "KeycloakAdminPassword": {
            "Type": "String",
            "Description": "Password for the keycloak admin user",
            "Default": "adminPassword"
        },
        "DatabaseAdminPassword": {
            "Type": "String",
            "Description": "Password for the DB user named keycloak",
            "MinLength": "8",
            "Default": "adminDBPassword"
        },
        "VpcId": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
            "ConstraintDescription": "must be the VPC Id of an existing Virtual Private Cloud. Outbound traffic for the default security group associated with this VPC should be enabled."
        },
        "Subnets": {
            "Type": "List<AWS::EC2::Subnet::Id>",
            "Description": "Public subnets for the keycloak Apps",
            "ConstraintDescription": "must be a list of at least TWO existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
        },
        "DatabaseSubnets": {
            "Type": "List<AWS::EC2::Subnet::Id>",
            "Description": "Subnets for the keycloak databases",
            "ConstraintDescription": "must be a list of at least TWO existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
        },
        "KeycloakVersion": {
            "Description": "Keycloak version",
            "Type": "String",
            "Default": "11.0.2",
            "AllowedValues": [
                "10.0.2",
                "11.0.2"
            ]
        },
        "InstanceType": {
            "Description": "WebServer EC2 instance type",
            "Type": "String",
            "Default": "t3.medium",
            "AllowedValues": [
                "t3.medium",
                "t3.large",
                "t3.xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "DatabaseInstanceType": {
            "Description": "Database EC2 instance type",
            "Type": "String",
            "Default": "db.t3.medium",
            "AllowedValues": [
                "db.t3.medium",
                "db.t3.large",
                "db.t3.xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "SSLCertificate":{
            "Description": "The ssl certificate for your domain",
            "Type": "String",
            "Default":"arn:aws:acm:eu-west-3:xxxxxxx:certificate/xxxxxxxxxxxx"
        }
    },
    "Mappings": {
        "AWSInstanceType2Arch": {
            "t3.medium": {
                "Arch": "HVM64"
            },
            "t3.large": {
                "Arch": "HVM64"
            },
            "t3.xlarge": {
                "Arch": "HVM64"
            }
        },
        "AWSRegionArch2AMI": {
            "us-east-1": {
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "us-west-2": {
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "us-west-1": {
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "eu-west-1": {
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "eu-west-2": {
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "eu-west-3": {
                "HVM64": "ami-0484612a17bb093e5",
                "HVMG2": "NOT_SUPPORTED"
            },
            "eu-central-1": {
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "eu-north-1": {
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-northeast-1": {
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-northeast-2": {
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-northeast-3": {
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-southeast-1": {
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-southeast-2": {
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-south-1": {
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "us-east-2": {
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ca-central-1": {
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "sa-east-1": {
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "cn-north-1": {
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "cn-northwest-1": {
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            }
        }
    },
    "Resources": {
        "WebServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": "DBInstance",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT10M",
                    "Count": "1"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MaxBatchSize": "1",
                    "MinInstancesInService": "1",
                    "PauseTime": "PT10M",
                    "WaitOnResourceSignals": "true"
                }
            },
            "Properties": {
                "VPCZoneIdentifier": {
                    "Ref": "Subnets"
                },
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfig"
                },
                "MinSize": {
                            "Ref": "InstanceCount"
                            },
                "MaxSize": {
                            "Ref": "MaxInstanceCount"
                            },
                "TargetGroupARNs": [
                    {
                        "Ref": "ALBTargetGroupHTTPS"
                    }
                ],
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 180
            }
        },
        "LaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/etc/systemd/system/keycloak.service": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[Unit]\n",
                                            "Description=The Keycloak Server\n",
                                            "After=syslog.target network.target\n",
                                            "Before=httpd.service\n",
                                            "[Service]\n",
                                            "Environment=LAUNCH_JBOSS_IN_BACKGROUND=1\n",
                                            "EnvironmentFile=/etc/keycloak/keycloak.conf\n",
                                            "User=keycloak\n",
                                            "Group=keycloak\n",
                                            "LimitNOFILE=102642\n",
                                            "PIDFile=/var/run/keycloak/keycloak.pid\n",
                                            "ExecStart=/opt/keycloak/bin/launch.sh $WILDFLY_MODE $WILDFLY_CONFIG $WILDFLY_BIND\n",
                                            "StandardOutput=syslog\n",
                                            "StandardError=syslog\n",
                                            "[Install]\n",
                                            "WantedBy=multi-user.target\n",
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/keycloak/keycloak.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "# The configuration you want to run\n",
                                            "WILDFLY_CONFIG=standalone-ha.xml\n",

                                            "# The mode you want to run\n",
                                            "WILDFLY_MODE=standalone\n",

                                            "# The address to bind to\n",
                                            "WILDFLY_BIND=0.0.0.0\n",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "/opt/keycloak/bin/launch.sh":
                            {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n", 
                                            "if [ \"x$WILDFLY_HOME\" = \"x\" ]; then\n",
                                            "    WILDFLY_HOME=\"/opt/wildfly\"\n",
                                            "fi\n",
                                            "if [[ \"$1\" == \"domain\" ]]; then\n",
                                            "    $WILDFLY_HOME/bin/domain.sh -c $2 -b $3\n",
                                            "else\n",
                                            "    $WILDFLY_HOME/bin/standalone.sh -c $2 -b $3 -bmanagement $3\n",
                                            "fi\n",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "/opt/keycloak/modules/system/layers/keycloak/org/mariadb/main/module.xml": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "<?xml version=\"1.0\" ?>\n",
                                            "<module xmlns=\"urn:jboss:module:1.3\" name=\"org.mariadb\">\n",
                                            "    <resources>\n",
                                            "        <resource-root path=\"mariadb-java-client-2.6.0.jar\"/>\n",
                                            "    </resources>\n",
                                            "    <dependencies>\n",
                                            "        <module name=\"javax.api\"/>\n",
                                            "        <module name=\"javax.transaction.api\"/>\n",
                                            "    </dependencies>\n",
                                            "</module>\n",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "/opt/keycloak/standalone/configuration/mariadb.config": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "embed-server --server-config=standalone-ha.xml --std-out=echo\n",
                                            "batch\n",
                                            "\n",
                                            "# install mariadb driver\n",
                                            "/subsystem=datasources/jdbc-driver=mariadb:add(driver-name=mariadb,driver-module-name=org.mariadb,driver-xa-datasource-class-name=org.mariadb.jdbc.MariaDbDataSource)\n",
                                            "\n",
                                            "# config datasource mariab\n",
                                            "data-source remove --name=KeycloakDS\n",
                                            "data-source add --name=KeycloakDS --jndi-name=java:jboss/datasources/KeycloakDS --driver-name=mariadb --connection-url=jdbc:mariadb://",{ "Fn::GetAtt": [ "DBCluster", "Endpoint.Address" ] },":3306/keycloak?characterEncoding=UTF-8 --user-name=keycloak --password=",{"Ref": "DatabaseAdminPassword"},"\n",
                                            "data-source --name=KeycloakDS --enabled=true --use-java-context=true --statistics-enabled=true --max-pool-size=40\n",
                                            "\n",
                                            "# add network interface\n",
                                            "/interface=ens5/:add(nic =ens5)\n",
                                            "# config socket bind\n",
                                            "/socket-binding-group=standard-sockets/socket-binding=jgroups-mping:remove()\n",
                                            "/socket-binding-group=standard-sockets/socket-binding=jgroups-tcp:write-attribute(name=interface, value=ens5)\n",
                                            "/socket-binding-group=standard-sockets/socket-binding=jgroups-tcp-fd:write-attribute(name=interface, value=ens5)\n",
                                            "\n",
                                            "# jgroups cluster config\n",
                                            "/subsystem=jgroups/stack=tcp:remove()\n",
                                            "/subsystem=jgroups/stack=tcp:add\n",
                                            "/subsystem=jgroups/stack=tcp/transport=TCP:add(socket-binding=jgroups-tcp)\n",
                                            "/subsystem=jgroups/stack=tcp/protocol=JDBC_PING:add(data-source=KeycloakDS)\n",
                                            "/subsystem=jgroups/stack=tcp/protocol=MERGE3:add\n",
                                            "/subsystem=jgroups/stack=tcp/protocol=FD_SOCK:add(socket-binding=jgroups-tcp-fd)\n",
                                            "/subsystem=jgroups/stack=tcp/protocol=FD_ALL:add\n",
                                            "/subsystem=jgroups/stack=tcp/protocol=VERIFY_SUSPECT:add\n",
                                            "/subsystem=jgroups/stack=tcp/protocol=pbcast.NAKACK2:add\n",
                                            "/subsystem=jgroups/stack=tcp/protocol=UNICAST3:add\n",
                                            "/subsystem=jgroups/stack=tcp/protocol=pbcast.STABLE:add\n",
                                            "/subsystem=jgroups/stack=tcp/protocol=pbcast.GMS:add\n",
                                            "/subsystem=jgroups/stack=tcp/protocol=MFC:add\n",
                                            "/subsystem=jgroups/stack=tcp/protocol=FRAG2:add\n",
                                            "/subsystem=jgroups/stack=udp:remove()\n",
                                            "/subsystem=jgroups/channel=ee:write-attribute(name=stack, value=tcp)\n",
                                            "\n",
                                            "# config https access\n",
                                            "/subsystem=undertow/server=default-server/http-listener=default:write-attribute(name=proxy-address-forwarding, value=true)\n",
                                            "/subsystem=undertow/server=default-server/http-listener=default:write-attribute(name=redirect-socket, value=proxy-https)\n",
                                            "/socket-binding-group=standard-sockets/socket-binding=proxy-https:add()\n",
                                            "/socket-binding-group=standard-sockets/socket-binding=proxy-https:write-attribute(name=port,value=443)\n",
                                            "\n",
                                            "run-batch\n",
                                            "stop-embedded-server\n",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/usr/local/bin/cfn-init -v ",
                                            "         --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "         --resource LaunchConfig ",
                                            "         --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n",
                                            "runas=root\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref": "InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "apt update\n",
                                "DEBIAN_FRONTEND=noninteractive apt-get upgrade -yq\n",

                                "apt install -y default-jre\n",
                                "cd /opt\n",
                                "wget https://downloads.jboss.org/keycloak/",{"Ref": "KeycloakVersion"},"/keycloak-",{"Ref": "KeycloakVersion"},".tar.gz\n",
                                "tar -zxvf keycloak-",{"Ref": "KeycloakVersion"},".tar.gz\n",
                                "ln -s /opt/keycloak-",{"Ref": "KeycloakVersion"}," /opt/keycloak \n",
                                "ln -s /opt/keycloak-",{"Ref": "KeycloakVersion"}," /opt/wildfly \n",
                                
                                "sudo apt install -y python3-pip\n",
                                "sudo pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz\n",
                                "cp /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup \n",
                                "chmod +x /etc/init.d/cfn-hup \n",
                                "update-rc.d cfn-hup defaults \n ",
                                "service cfn-hup start \n",
                                "/usr/local/bin/cfn-init -v ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource LaunchConfig ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                
                                "cd /opt\n",
                                "./keycloak/bin/add-user-keycloak.sh -r master -u admin -p ",
                                {
                                    "Ref": "KeycloakAdminPassword"
                                },
                                "\n",
                                "groupadd keycloak\n",
                                "useradd -r -g keycloak -d /opt/keycloak/ -s /sbin/nologin keycloak\n",
                                "chown -R keycloak: keycloak* \n",
                                "chmod o+x /opt/keycloak/bin/\n",
                                "chown keycloak: /opt/keycloak/bin/launch.sh\n",
                                "chmod +x /opt/keycloak/bin/launch.sh\n",
                                "sudo -u keycloak /opt/keycloak/bin/add-user.sh -u adminWildfly -p ",{
                                    "Ref": "KeycloakAdminPassword"
                                },
                                "\n",
                                "systemctl daemon-reload\n",
                                "systemctl enable keycloak\n",

                                "cd /opt/keycloak/modules/system/layers/keycloak/org/mariadb/main/ \n",
                                "sudo -u keycloak wget https://downloads.mariadb.com/Connectors/java/connector-java-2.6.0/mariadb-java-client-2.6.0.jar \n",
                                "cd /opt/keycloak/standalone/configuration/ \n",
                                "sudo -u keycloak /opt/keycloak/bin/jboss-cli.sh --file=mariadb.config \n",

                                "systemctl start keycloak\n",

                                "/usr/local/bin/cfn-signal -s true ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource WebServerGroup ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "ApplicationLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Subnets": {
                    "Ref": "Subnets"
                },
                "SecurityGroups": [
                    {
                        "Ref": "ALBSecurityGroup"
                    }
                ]
            }
        },
        "HTTPListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "redirect",
                        "RedirectConfig": {
                            "Host" : "#{host}",
                            "Path" : "/#{path}",
                            "Port" : "443",
                            "Protocol" : "HTTPS",
                            "Query" : "#{query}",
                            "StatusCode" : "HTTP_301"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ApplicationLoadBalancer"
                },
                "Port": "80",
                "Protocol": "HTTP"
            }
        },
        "HTTPSListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ALBTargetGroupHTTPS"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ApplicationLoadBalancer"
                },
                "Certificates": [{"CertificateArn" :{"Ref":"SSLCertificate"}}],
                "Port": "443",
                "Protocol": "HTTPS"
            }
        },
        "ALBTargetGroupHTTPS": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 30,
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 3,
                "Port": 8443,
                "Protocol": "HTTPS",
                "UnhealthyThresholdCount": 3,
                "TargetGroupAttributes" : [
                    {
                        "Key" : "stickiness.enabled",
                        "Value" : "true"
                    },
                    {
                        "Key" : "stickiness.type",
                        "Value" : "lb_cookie"
                    },
                    {
                        "Key" : "slow_start.duration_seconds",
                        "Value" : 60
                    },
                    {
                        "Key" : "stickiness.lb_cookie.duration_seconds",
                        "Value" : 36000
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable SSH access and HTTP access on the configured port",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "7600",
                        "ToPort": "7600",
                        "CidrIp": "10.0.0.0/8"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "57600",
                        "ToPort": "57600",
                        "CidrIp": "10.0.0.0/8"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8443",
                        "ToPort": "8443",
                        "CidrIp": "10.0.0.0/8"
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "DBSecurityGroup":{
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable database access",
                "SecurityGroupIngress" : [ 
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3306",
                        "ToPort": "3306",
                        "SourceSecurityGroupId": {
                            "Ref": "InstanceSecurityGroup"
                        }
                    }
                ],
                "VpcId" : {
                    "Ref": "VpcId"
                }
              }
        },   
        "ALBSecurityGroup":{
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable external access to keycloak",
                "SecurityGroupIngress" : [ 
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId" : {
                    "Ref": "VpcId"
                }
              }
        },   
        "DBCluster": {
            "Type": "AWS::RDS::DBCluster",
            "Properties": {
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroup"
                },
                "Engine": "aurora",
                "MasterUsername": "keycloak",
                "MasterUserPassword": {"Ref": "DatabaseAdminPassword"},
                "BackupRetentionPeriod": 5,
                "DatabaseName": "keycloak",
                "DeletionProtection": "true",
                "PreferredBackupWindow": "01:00-02:00",
                "PreferredMaintenanceWindow": "sun:02:00-sun:03:00",
                "VpcSecurityGroupIds": [
                    {
                        "Ref": "DBSecurityGroup"
                    }
                ]
            }
        },
        "DBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription" :"keycloak database",
                "SubnetIds": {
                    "Ref": "DatabaseSubnets"
                }
            }
        },
        "DBParameterGroup": {
            "Type": "AWS::RDS::DBParameterGroup",
            "Properties": {
                "Description" :"DB max cnx : 200",
                "Family": "aurora5.6",
                "Parameters": {
                    "max_connections": "200"
                }
            }
        },
        "DBInstance": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "Engine": "aurora",
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroup"
                },
                "DBClusterIdentifier": {
                    "Ref": "DBCluster"
                },
                "DBInstanceClass": {
                    "Ref": "DatabaseInstanceType"
                },
                "DBParameterGroupName": {
                    "Ref": "DBParameterGroup"
                }
            }
        },
        "DBInstance2": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "Engine": "aurora",
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroup"
                },
                "DBClusterIdentifier": {
                    "Ref": "DBCluster"
                },
                "DBInstanceClass": {
                    "Ref": "DatabaseInstanceType"
                },
                "DBParameterGroupName": {
                    "Ref": "DBParameterGroup"
                }
            }
        },
        "ExternalDNSRecord" : {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneName" : { "Ref": "ExternalDnsSuffix" },
                "Comment" : "External name alias targeted to the LoadBalancer.",
                "Name" : {
                    "Fn::Join": [
                        ".",
                        [
                            { "Ref": "ApplicationName" },
                            { "Ref": "ExternalDnsSuffix" }
                        ]
                    ]
                },
                "Type" : "A",
                "AliasTarget" : {
                    "HostedZoneId" : { "Fn::GetAtt" : ["ApplicationLoadBalancer", "CanonicalHostedZoneID"] },
                    "DNSName" : { "Fn::GetAtt" : ["ApplicationLoadBalancer","DNSName"] }
                }
            }
        }        
    },
    "Outputs": {
        "ExternalDNSName": {
            "Description": "External dns name",
            "Value": { "Ref" : "ExternalDNSRecord" }
        }
    }
}
